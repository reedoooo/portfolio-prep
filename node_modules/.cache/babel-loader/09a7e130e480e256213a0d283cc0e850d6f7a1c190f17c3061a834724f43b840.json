{"ast":null,"code":"import { keyframes } from '../generators/keyframes.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nconst types = {\n  decay: inertia,\n  inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n  let duration = 0;\n  const timeStep = 50;\n  let state = generator.next(duration);\n  while (!state.done && duration < maxDuration) {\n    duration += timeStep;\n    state = generator.next(duration);\n  }\n  return duration;\n}\nfunction animateValue(_ref) {\n  let {\n    autoplay = true,\n    delay = 0,\n    driver = frameloopDriver,\n    keyframes: keyframes$1,\n    type = \"keyframes\",\n    repeat = 0,\n    repeatDelay = 0,\n    repeatType = \"loop\",\n    onPlay,\n    onStop,\n    onComplete,\n    onUpdate,\n    ...options\n  } = _ref;\n  let animationDriver;\n  const generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n  let mapNumbersToKeyframes;\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n  const generator = generatorFactory({\n    ...options,\n    keyframes: keyframes$1\n  });\n  let mirroredGenerator;\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory({\n      ...options,\n      keyframes: [...keyframes$1].reverse(),\n      velocity: -(options.velocity || 0)\n    });\n  }\n  let playState = \"idle\";\n  let holdTime = null;\n  let startTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calculateDuration(generator);\n  }\n  const {\n    calculatedDuration\n  } = generator;\n  let resolvedDuration = Infinity;\n  let totalDuration = Infinity;\n  if (calculatedDuration) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n  let currentTime = 0;\n  const tick = timestamp => {\n    if (startTime === null) return;\n    if (holdTime !== null) {\n      currentTime = holdTime;\n    } else {\n      currentTime = timestamp - startTime;\n    }\n    // Rebase on delay\n    currentTime = Math.max(currentTime - delay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n    if (playState === \"finished\" && holdTime === null) {\n      currentTime = totalDuration;\n    }\n    let elapsed = currentTime;\n    let frameGenerator = generator;\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      const progress = currentTime / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n      let currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n      let iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      iterationProgress === 1 && currentIteration--;\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n      const iterationIsOdd = currentIteration % 2;\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n      const p = currentTime >= totalDuration ? repeatType === \"reverse\" && iterationIsOdd ? 0 : 1 : clamp(0, 1, iterationProgress);\n      elapsed = p * resolvedDuration;\n    }\n    const state = frameGenerator.next(elapsed);\n    let {\n      value,\n      done\n    } = state;\n    if (onUpdate) {\n      onUpdate(mapNumbersToKeyframes ? mapNumbersToKeyframes(value) : value);\n    }\n    if (calculatedDuration !== null) {\n      done = currentTime >= totalDuration;\n    }\n    const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done);\n    if (isAnimationFinished) {\n      playState = \"finished\";\n      onComplete && onComplete();\n      animationDriver && animationDriver.stop();\n    }\n    return state;\n  };\n  const play = () => {\n    animationDriver = driver(tick);\n    const now = animationDriver.now();\n    onPlay && onPlay();\n    playState = \"running\";\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime) {\n      // TODO When implementing play/pause, check WAAPI\n      // logic around finished animations\n      startTime = now;\n    }\n    holdTime = null;\n    animationDriver.start();\n  };\n  if (autoplay) {\n    play();\n  }\n  const controls = {\n    get currentTime() {\n      return millisecondsToSeconds(currentTime);\n    },\n    set currentTime(newTime) {\n      if (holdTime !== null || !animationDriver) {\n        holdTime = 0;\n      } else {\n        startTime = animationDriver.now() - secondsToMilliseconds(newTime);\n      }\n    },\n    stop: () => {\n      onStop && onStop();\n      animationDriver && animationDriver.stop();\n    },\n    sample: elapsed => {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\nexport { animateValue };","map":{"version":3,"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","types","decay","tween","maxDuration","calculateDuration","generator","duration","timeStep","state","next","done","animateValue","autoplay","delay","driver","keyframes$1","type","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","options","animationDriver","generatorFactory","mapNumbersToKeyframes","mirroredGenerator","reverse","velocity","playState","holdTime","startTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","currentTime","tick","timestamp","Math","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","p","value","isAnimationFinished","stop","play","now","start","controls","newTime","sample"],"sources":["/Users/petervogt/Desktop/portfolio-prep/node_modules/framer-motion/dist/es/animation/js/index.mjs"],"sourcesContent":["import { keyframes } from '../generators/keyframes.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration;\n}\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calculateDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            currentTime = timestamp - startTime;\n        }\n        // Rebase on delay\n        currentTime = Math.max(currentTime - delay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = currentIteration % 2;\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            const p = currentTime >= totalDuration\n                ? repeatType === \"reverse\" && iterationIsOdd\n                    ? 0\n                    : 1\n                : clamp(0, 1, iterationProgress);\n            elapsed = p * resolvedDuration;\n        }\n        const state = frameGenerator.next(elapsed);\n        let { value, done } = state;\n        if (onUpdate) {\n            onUpdate(mapNumbersToKeyframes ? mapNumbersToKeyframes(value) : value);\n        }\n        if (calculatedDuration !== null) {\n            done = currentTime >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (isAnimationFinished) {\n            playState = \"finished\";\n            onComplete && onComplete();\n            animationDriver && animationDriver.stop();\n        }\n        return state;\n    };\n    const play = () => {\n        animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        playState = \"running\";\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime) {\n            // TODO When implementing play/pause, check WAAPI\n            // logic around finished animations\n            startTime = now;\n        }\n        holdTime = null;\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        get currentTime() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set currentTime(newTime) {\n            if (holdTime !== null || !animationDriver) {\n                holdTime = 0;\n            }\n            else {\n                startTime =\n                    animationDriver.now() - secondsToMilliseconds(newTime);\n            }\n        },\n        stop: () => {\n            onStop && onStop();\n            animationDriver && animationDriver.stop();\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}